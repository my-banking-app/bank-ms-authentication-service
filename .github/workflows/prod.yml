name: CI/CD Pipeline - Production

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - 'main'
      - 'BANK_**'
      - 'BANK_*/*'

jobs:
  analyze:
    name: SonarCloud Analysis
    runs-on: ubuntu-latest

    outputs:
      task-id: ${{ steps.extract-task-id.outputs.task-id }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: 21
          distribution: 'temurin'

      - name: Build and analyze with SonarCloud
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar \
            -Dsonar.projectKey=my-banking-app_bank-ms-authentication-service \
            -Dsonar.organization=my-banking-app \
            -Dsonar.host.url=https://sonarcloud.io \
            -Dsonar.login=${{ secrets.SONAR_TOKEN }} \
            -Dsonar.exclusions=**/*Test.java \
            -Dsonar.coverage.jacoco.xmlReportPaths=target/site/jacoco/jacoco.xml

      - name: Extract ceTaskId from report
        id: extract-task-id
        run: |
          echo "‚åõ Extrayendo taskId de SonarCloud..."
          taskId=$(grep 'ceTaskId' target/sonar/report-task.txt | cut -d'=' -f2)
          echo "taskId=$taskId"
          echo "task-id=$taskId" >> $GITHUB_OUTPUT

  deploy:
    name: Deploy to VPS
    runs-on: ubuntu-latest
    needs: analyze
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check SonarCloud Quality Gate status
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          taskId="${{ needs.analyze.outputs.task-id }}"

          if [ -z "$taskId" ]; then
            echo "‚ùå No se pudo recuperar el taskId del an√°lisis SonarCloud"
            exit 1
          fi

          echo "‚åõ Esperando an√°lisis en SonarCloud para taskId: $taskId"

          status="PENDING"
          attempts=0
          while [[ "$status" != "SUCCESS" && $attempts -lt 20 ]]; do
            sleep 5
            status=$(curl -s -u "${SONAR_TOKEN}:" "https://sonarcloud.io/api/ce/task?id=${taskId}" | jq -r '.task.status')
            echo "‚è≥ Estado actual del an√°lisis: $status (intento $((attempts+1)))"
            attempts=$((attempts+1))
          done

          if [[ "$status" != "SUCCESS" ]]; then
            echo "‚ùå El an√°lisis en SonarCloud no finaliz√≥ correctamente"
            exit 1
          fi

          analysisId=$(curl -s -u "${SONAR_TOKEN}:" "https://sonarcloud.io/api/ce/task?id=${taskId}" | jq -r '.task.analysisId')
          echo "üîç analysisId: $analysisId"

          qualityGate=$(curl -s -u "${SONAR_TOKEN}:" "https://sonarcloud.io/api/qualitygates/project_status?analysisId=${analysisId}" | jq -r '.projectStatus.status')
          echo "üîç Estado del Quality Gate: $qualityGate"

          if [ "$qualityGate" != "OK" ]; then
            echo "‚ùå El Quality Gate fall√≥. Deteniendo el pipeline."
            exit 1
          fi

          echo "‚úÖ Quality Gate aprobado. Continuando con el despliegue."

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Log in to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push production image
        run: |
          docker buildx build --push --tag ${{ secrets.DOCKER_USERNAME }}/auth-service:prod .

      - name: SSH to VPS and deploy
        uses: appleboy/ssh-action@v1.2.2
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.VPS_PRIVATE_KEY }}
          script: |
            docker pull ${{ secrets.DOCKER_USERNAME }}/auth-service:prod
            docker stop auth-service-prod || true
            docker rm auth-service-prod || true
            docker run -d --restart=unless-stopped --name auth-service-prod -p 8082:8082 \
              --network banking-net \
              -e SPRING_PROFILES_ACTIVE=prod \
              -e SPRING_DATASOURCE_URL=${{ secrets.SPRING_DATASOURCE_URL }} \
              -e DB_NAME=${{ secrets.DB_NAME }} \
              -e DB_USER=${{ secrets.DB_USER }} \
              -e DB_PASSWORD=${{ secrets.DB_PASSWORD }} \
              -e API_KEY=${{ secrets.API_KEY }} \
              -e JWT_SECRET=${{ secrets.JWT_SECRET }} \
              ${{ secrets.DOCKER_USERNAME }}/auth-service:prod
